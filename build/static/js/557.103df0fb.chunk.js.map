{"version":3,"file":"static/js/557.103df0fb.chunk.js","mappings":"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","sources":["pages/contact.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  Box,\n  TextField,\n  Button,\n  Typography,\n  CircularProgress,\n  Snackbar,\n  MenuItem,\n} from \"@mui/material\";\nimport { useFormik } from \"formik\";\nimport { string, object } from \"yup\";\nimport PhoneIcon from \"@mui/icons-material/Phone\";\n\nconst Contact = () => {\n  const [countries, setCountries] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n\n  useEffect(() => {\n    const fetchCountries = async () => {\n      try {\n        const response = await axios.get(\n          \"https://restcountries.com/v3.1/all?fields=name,cca3\"\n        );\n        setCountries(response.data);\n      } catch (error) {\n        console.error(\"Error fetching countries:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCountries();\n  }, []);\n\n  const validationSchema = object({\n    name: string().min(3, \"Too short\").max(50, \"Too long\").required(\"Required\"),\n    email: string().email(\"Invalid email\").required(\"Required\"),\n    message: string().min(10, \"Too short\").required(\"Required\"),\n    country: string().required(\"Required\"),\n    phone: string()\n      .matches(/^\\+?\\d{7,15}$/, \"Invalid phone number\")\n      .required(\"Required\"),\n    postcode: string().matches(/^\\d{4,10}$/, \"Invalid postcode\").optional(),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      email: \"\",\n      message: \"\",\n      country: \"\",\n      phone: \"\",\n      postcode: \"\",\n    },\n    validationSchema,\n    onSubmit: async (values, { resetForm }) => {\n      try {\n        // Update the API call with the full Vercel endpoint URL\n        await axios.post(\"https://emailsend-six.vercel.app/api/sendEmail\", values);\n\n        setSnackbarMessage(\"Message sent successfully!\");\n        resetForm();\n      } catch (error) {\n        console.error(\"Email sending error:\", error);\n        setSnackbarMessage(\"There was an error sending the message.\");\n      } finally {\n        setOpenSnackbar(true);\n      }\n    },\n  });\n\n  return (\n    <Box>\n      <Box sx={{ textAlign: \"center\", mt: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Contact Us\n        </Typography>\n        <Typography variant=\"body1\" paragraph>\n          Have a question or need assistance? Fill out the form below, and we&lsquo;ll get back to you as soon as possible.\n        </Typography>\n      </Box>\n\n      <Box sx={{ mt: 4, mb: 15, display: \"flex\", flexDirection: { xs: \"column\", md: \"row\" }, gap: 4 }}>\n        <Box sx={{ flex: 1, padding: 2, backgroundColor: \"#fff\", borderRadius: 2 }}>\n          <Box sx={{ display: \"flex\", alignItems: \"center\", marginBottom: 2 }}>\n            <PhoneIcon sx={{ fontSize: \"2em\", marginRight: 1, color: \"#3a7de8\" }} />\n            <Typography variant=\"body1\">\n              <strong>0240024512 / 0504484966</strong>\n            </Typography>\n          </Box>\n          <Typography variant=\"h6\" component=\"h2\" gutterBottom>\n            Our Location\n          </Typography>\n          <Box sx={{ width: \"100%\", height: { xs: 100, md: 450 } }}>\n            <iframe\n              src=\"https://www.google.com/maps/embed?... (your map URL)\"\n              width=\"100%\"\n              height=\"450\"\n              style={{ border: 0 }}\n              allowFullScreen=\"\"\n              loading=\"lazy\"\n              referrerPolicy=\"no-referrer-when-downgrade\"\n            ></iframe>\n          </Box>\n        </Box>\n\n        <Box sx={{ flex: 1, padding: 2, backgroundColor: \"#fff\", boxShadow: 3, borderRadius: 2 }}>\n          {loading ? (\n            <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"100%\" }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <Box component=\"form\" onSubmit={formik.handleSubmit}>\n              <TextField\n                fullWidth\n                label=\"Name\"\n                name=\"name\"\n                value={formik.values.name}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.name && Boolean(formik.errors.name)}\n                helperText={formik.touched.name && formik.errors.name}\n                margin=\"normal\"\n              />\n              <TextField\n                fullWidth\n                label=\"Email\"\n                name=\"email\"\n                type=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n                margin=\"normal\"\n              />\n              <TextField\n                fullWidth\n                label=\"Message\"\n                name=\"message\"\n                value={formik.values.message}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.message && Boolean(formik.errors.message)}\n                helperText={formik.touched.message && formik.errors.message}\n                margin=\"normal\"\n                multiline\n                rows={4}\n              />\n              <TextField\n                fullWidth\n                select\n                label=\"Country\"\n                name=\"country\"\n                value={formik.values.country}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.country && Boolean(formik.errors.country)}\n                helperText={formik.touched.country && formik.errors.country}\n                margin=\"normal\"\n              >\n                <MenuItem value=\"\" disabled>Select your country</MenuItem>\n                {countries.map((country) => (\n                  <MenuItem key={country.cca3} value={country.name.common}>\n                    {country.name.common}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField\n                fullWidth\n                label=\"Phone\"\n                name=\"phone\"\n                value={formik.values.phone}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.phone && Boolean(formik.errors.phone)}\n                helperText={formik.touched.phone && formik.errors.phone}\n                margin=\"normal\"\n              />\n              <TextField\n                fullWidth\n                label=\"Postcode (Optional)\"\n                name=\"postcode\"\n                value={formik.values.postcode}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.postcode && Boolean(formik.errors.postcode)}\n                helperText={formik.touched.postcode && formik.errors.postcode}\n                margin=\"normal\"\n              />\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\" sx={{ marginTop: 2, width: \"100%\" }}>\n                Send Message\n              </Button>\n            </Box>\n          )}\n        </Box>\n      </Box>\n\n      <Snackbar\n        open={openSnackbar}\n        autoHideDuration={6000}\n        onClose={() => setOpenSnackbar(false)}\n        message={snackbarMessage}\n      />\n    </Box>\n  );\n};\n\nexport default Contact;\n"],"names":["Contact","countries","setCountries","useState","loading","setLoading","openSnackbar","setOpenSnackbar","snackbarMessage","setSnackbarMessage","useEffect","async","response","axios","get","data","error","console","fetchCountries","validationSchema","object","name","string","min","max","required","email","message","country","phone","matches","postcode","optional","formik","useFormik","initialValues","onSubmit","values","_ref","resetForm","post","React","Box","sx","textAlign","mt","Typography","variant","gutterBottom","paragraph","mb","display","flexDirection","xs","md","gap","flex","padding","backgroundColor","borderRadius","alignItems","marginBottom","PhoneIcon","fontSize","marginRight","color","component","width","height","src","style","border","allowFullScreen","referrerPolicy","boxShadow","justifyContent","CircularProgress","handleSubmit","TextField","fullWidth","label","value","onChange","handleChange","onBlur","handleBlur","touched","Boolean","errors","helperText","margin","type","multiline","rows","select","MenuItem","disabled","map","key","cca3","common","Button","marginTop","Snackbar","open","autoHideDuration","onClose"],"sourceRoot":""}