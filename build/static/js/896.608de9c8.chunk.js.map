{"version":3,"file":"static/js/896.608de9c8.chunk.js","mappings":"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","sources":["components/imageGalleryWithLightBox.js","components/adminPage.js","firebase.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { storage } from '../firebase.js';\nimport { ref, getDownloadURL, listAll, deleteObject } from 'firebase/storage';\nimport Gallery from 'react-photo-gallery';\nimport 'react-image-lightbox/style.css'; // Include default styles\nimport Lightbox from 'react-image-lightbox';\n\nconst ImageGalleryWithLightbox = () => {\n  const [images, setImages] = useState([]);\n  const [imageRefs, setImageRefs] = useState([]); // Store references to Firebase storage\n  const [selectedImageIndex, setSelectedImageIndex] = useState(null);\n  const [isImageLoaded, setIsImageLoaded] = useState(false);\n\n  // Fetch images and their refs\n  const fetchImages = async () => {\n    try {\n      const storageRef = ref(storage, 'media');\n      const result = await listAll(storageRef);\n      const urls = await Promise.all(result.items.map((item) => getDownloadURL(item)));\n      setImages(urls);\n      setImageRefs(result.items); // Store Firebase references\n    } catch (error) {\n      console.error('Failed to fetch images:', error.message);\n    }\n  };\n\n  useEffect(() => {\n    fetchImages();\n  }, []);\n\n  // Preload selected image when Lightbox opens\n  useEffect(() => {\n    if (selectedImageIndex !== null) {\n      const img = new Image();\n      img.src = images[selectedImageIndex];\n      img.onload = () => setIsImageLoaded(true);\n    } else {\n      setIsImageLoaded(false);\n    }\n  }, [selectedImageIndex, images]);\n\n  // Delete selected image\n  const handleDelete = async () => {\n    if (selectedImageIndex === null) return;\n\n    try {\n      const fileRef = imageRefs[selectedImageIndex]; // Use the exact Firebase reference\n      await deleteObject(fileRef);\n      alert('Image deleted successfully!');\n      setSelectedImageIndex(null); // Close the Lightbox\n      fetchImages(); // Refresh image list\n    } catch (error) {\n      console.error('Delete failed:', error.message);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Image Gallery</h2>\n      <Gallery\n        photos={images.map((url) => ({ src: url, width: 1, height: 1 }))}\n        onClick={(event, { index }) => setSelectedImageIndex(index)}\n      />\n      {selectedImageIndex !== null && isImageLoaded && (\n        <Lightbox\n          mainSrc={images[selectedImageIndex]}\n          nextSrc={images[(selectedImageIndex + 1) % images.length]}\n          prevSrc={images[(selectedImageIndex + images.length - 1) % images.length]}\n          onCloseRequest={() => setSelectedImageIndex(null)}\n          onMovePrevRequest={() =>\n            setSelectedImageIndex((selectedImageIndex + images.length - 1) % images.length)\n          }\n          onMoveNextRequest={() =>\n            setSelectedImageIndex((selectedImageIndex + 1) % images.length)\n          }\n          toolbarButtons={[\n            <button\n              key=\"delete\"\n              style={{\n                padding: '10px',\n                backgroundColor: '#f44336',\n                color: '#fff',\n                border: 'none',\n                borderRadius: '5px',\n                cursor: 'pointer',\n                fontSize: '14px',\n              }}\n              onClick={handleDelete}\n            >\n              Delete\n            </button>,\n          ]}\n        />\n      )}\n      {selectedImageIndex !== null && !isImageLoaded && (\n        <div>Loading image...</div> // Fallback during preload\n      )}\n    </div>\n  );\n};\n\nexport default ImageGalleryWithLightbox;\n","// src/pages/AdminPage.js\nimport React, { useState, useEffect } from 'react';\nimport { auth, storage } from '../firebase.js'; // Firebase initialization\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { ref, uploadBytes, listAll, deleteObject } from 'firebase/storage';\nimport ImageGalleryWithLightbox from './imageGalleryWithLightBox';  // Correct import path // Import the gallery component\nimport { getDownloadURL } from 'firebase/storage';  // Remove this from firebase.js\n\n\nconst AdminPage = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [file, setFile] = useState(null);\n  const [images, setImages] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Fetch uploaded images\n  const fetchImages = async () => {\n    try {\n      const storageRef = ref(storage, 'media');  // Reference to the 'media' folder in Firebase Storage\n      const result = await listAll(storageRef);  // List all the files in the 'media' folder\n      const urls = await Promise.all(result.items.map((item) => getDownloadURL(item))); // Get download URLs\n      setImages(urls);  // Store the URLs in the state\n    } catch (error) {\n      console.error('Failed to fetch images:', error.message);\n    }\n  };\n  \n\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchImages();\n    }\n  }, [isAuthenticated]);\n\n  // Admin login\n  const handleLogin = async () => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Login failed:', error.message);\n    }\n  };\n\n  // Upload image\n  const handleUpload = async () => {\n    if (!file) return alert('Please select a file!');\n    const storageRef = ref(storage, `media/${file.name}`);\n    try {\n      await uploadBytes(storageRef, file);\n      alert('Image uploaded successfully!');\n      fetchImages(); // Refresh image list\n    } catch (error) {\n      console.error('Upload failed:', error.message);\n    }\n  };\n\n  // Delete image\n  const handleDelete = async (url) => {\n    try {\n      const fileRef = ref(storage, `media/${url.split('/').pop()}`); // Extract file name and delete it\n      await deleteObject(fileRef);\n      alert('Image deleted successfully!');\n      fetchImages(); // Refresh image list\n    } catch (error) {\n      console.error('Delete failed:', error.message);\n    }\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div>\n        <h1>Admin Login</h1>\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button onClick={handleLogin}>Login</button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h1>Admin Dashboard</h1>\n      <div>\n        <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n        <button onClick={handleUpload}>Upload Image</button>\n      </div>\n      <div>\n        <h2>Uploaded Images</h2>\n        <ImageGalleryWithLightbox\n          images={images}\n          fetchImages={fetchImages}\n          handleDelete={handleDelete}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AdminPage;\n","import { initializeApp } from \"firebase/app\";\nimport { \n  getAuth, \n  signOut, \n  signInWithEmailAndPassword, \n  createUserWithEmailAndPassword, \n  sendEmailVerification, \n  fetchSignInMethodsForEmail,\n  sendPasswordResetEmail\n} from \"firebase/auth\";\nimport { \n  getFirestore, \n  collection, \n  addDoc, \n  getDocs,  \n  updateDoc, \n  doc, \n  getDoc,\n  arrayUnion, \n  query, \n  orderBy, \n  limit, \n  startAfter, \n  serverTimestamp,where\n} from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Firebase Services\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst storage = getStorage(app);\n\nexport { auth, db, storage };\n\n// User Signup Function\nexport const signUpWithEmailAndPassword = async (email, password) => {\n  try {\n    if (password.length < 8) throw new Error(\"Password must be at least 8 characters long.\");\n    if (!/[A-Z]/.test(password) || !/[0-9]/.test(password) || !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      throw new Error(\"Password must include at least one uppercase letter, one number, and one special character.\");\n    }\n\n    const methods = await fetchSignInMethodsForEmail(auth, email);\n    if (methods.length > 0) throw new Error(\"Email already in use.\");\n\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    await sendEmailVerification(user);\n    return user;\n  } catch (error) {\n    console.error(\"Error during signup:\", error.message);\n    throw error;\n  }\n};\n\n// Sign-In Function\nexport const signInUser = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    if (!user.emailVerified) throw new Error(\"Please verify your email before logging in.\");\n\n    // Check for existing sessions\n    const sessionsRef = collection(db, \"sessions\");\n    const q = query(sessionsRef, where(\"userId\", \"==\", user.uid), where(\"isActive\", \"==\", true));\n    const querySnapshot = await getDocs(q);\n\n    // Log out old sessions\n    if (!querySnapshot.empty) {\n      querySnapshot.forEach(async (docSnap) => {\n        await updateDoc(doc(db, \"sessions\", docSnap.id), { isActive: false });\n      });\n    }\n\n    // Store new session\n    const sessionRef = await addDoc(sessionsRef, {\n      userId: user.uid,\n      email: user.email,\n      loginTime: new Date(),\n      isActive: true,\n    });\n\n    return { user, sessionId: sessionRef.id };\n  } catch (error) {\n    console.error(\"Error during sign-in:\", error.message);\n    throw error;\n  }\n};\n\n// Log-Out Function\nexport const logOutUser = async (sessionId) => {\n  try {\n    if (!sessionId) throw new Error(\"Session ID is required for logout.\");\n\n    // Mark session as inactive in Firestore\n    const sessionRef = doc(db, \"sessions\", sessionId);\n    await updateDoc(sessionRef, { isActive: false, logoutTime: new Date() });\n\n    // Sign out from Firebase Auth\n    await signOut(auth);\n    console.log(\"User logged out successfully.\");\n  } catch (error) {\n    console.error(\"Error during logout:\", error.message);\n    throw error;\n  }\n};\n\n// Fetch Comments Function\nexport const fetchComments = async (lastVisibleDoc = null) => {\n  try {\n    const commentsRef = collection(db, \"comments\");\n    let q = query(commentsRef, orderBy(\"timestamp\", \"desc\"), limit(10));\n\n    if (lastVisibleDoc) {\n      q = query(commentsRef, orderBy(\"timestamp\", \"desc\"), startAfter(lastVisibleDoc), limit(10));\n    }\n\n    const snapshot = await getDocs(q);\n    const comments = snapshot.docs.map(doc => {\n      const data = doc.data();\n      return {\n        id: doc.id,\n        content: data.content,\n        userEmail: data.userEmail,\n        timestamp: data.timestamp?.toDate() || new Date(),\n        likes: data.likesUser?.length || 0, // Safe fallback to 0\n        dislikes: data.dislikesUser?.length || 0, // Safe fallback to 0\n        replies: data.replies || [],\n        likesUser: data.likesUser || [], // Default to empty array if undefined\n        dislikesUser: data.dislikesUser || [], // Default to empty array if undefined\n      };\n    });\n\n    return { comments, lastVisible: snapshot.docs[snapshot.docs.length - 1] };\n  } catch (error) {\n    console.error(\"Error fetching comments:\", error.message);\n    throw error;\n  }\n};\n\n// Add Comment to Firestore\nexport const addComment = async (text, currentUser) => {\n  try {\n    if (!currentUser || !currentUser.email || !currentUser.userId) {\n      throw new Error(\"User not authenticated.\");\n    }\n\n    const commentsRef = collection(db, \"comments\");\n    const newComment = {\n      userEmail: currentUser.email,\n      userId: currentUser.userId,\n      content: text,\n      timestamp: serverTimestamp(),\n      likes: 0,\n      dislikes: 0,\n      adminEmail: '',\n      replies: [],\n      likesUser: [], // Initialize as empty array\n      dislikesUser: [], // Initialize as empty array\n      isEdited: false,\n      lastEditedTimestamp: null,\n    };\n\n    const docRef = await addDoc(commentsRef, newComment);\n    newComment.id = docRef.id;\n\n    return newComment;\n  } catch (error) {\n    console.error(\"Error adding comment:\", error.message);\n    throw error;\n  }\n};\n\n// Verify Comment by Admin\nexport const verifyComment = async (commentId) => {\n  try {\n    const commentRef = doc(db, \"comments\", commentId);\n    await updateDoc(commentRef, { isVerified: true });\n    console.log(`Comment ${commentId} verified successfully.`);\n  } catch (error) {\n    console.error(\"Error verifying comment:\", error.message);\n    throw error;\n  }\n};\n\n// Update Comment in Firestore\nexport const updateCommentInFirestore = async (docId, commentData) => {\n  try {\n    const commentRef = doc(db, \"comments\", docId);\n    const docSnap = await getDoc(commentRef);\n\n    if (!docSnap.exists()) {\n      console.error(\"Document not found for docId:\", docId);\n      throw new Error(`Comment with ID ${docId} not found.`);\n    }\n\n    console.log(\"Document fetched successfully:\", docSnap.data());\n\n    // Ensure values are always defined\n    const updatedData = {\n      likes: commentData.likes ?? 0,\n      dislikes: commentData.dislikes ?? 0,\n      likesUser: Array.isArray(commentData.likesUser) ? commentData.likesUser : [],\n      dislikesUser: Array.isArray(commentData.dislikesUser) ? commentData.dislikesUser : [],\n    };\n\n    // Update Firestore document\n    await updateDoc(commentRef, updatedData);\n\n    console.log(\"Comment updated successfully.\");\n  } catch (error) {\n    console.error(\"Error updating Firestore document:\", error.message);\n    throw error;\n  }\n};\n\n// Reset Password Function\nexport const resetPassword = async (email) => {\n  try {\n    if (!email) throw new Error(\"Email address is required.\");\n    await sendPasswordResetEmail(auth, email);\n    console.log(\"Password reset email sent successfully to:\", email);\n    return { success: true, message: \"Password reset email sent.\" };\n  } catch (error) {\n    console.error(\"Error sending password reset email:\", error.message);\n    throw error;\n  }\n};\n\n// Reply to a comment function\nexport const addReplyToComment = async (commentDocId, newReply) => {\n  try {\n    console.log(\"Debug: commentDocId passed to addReplyToComment:\", commentDocId);\n    // Get the reference to the main comment document\n    const commentRef = doc(db, \"comments\", commentDocId);\n\n    // Update the replies array in the comment document using arrayUnion from Firestore SDK\n    await updateDoc(commentRef, {\n      replies: arrayUnion(newReply), // Add the new reply to the replies array\n    });\n\n    console.log(\"Reply added successfully to comment:\", commentDocId);\n  } catch (error) {\n    console.error(\"Error adding reply to comment:\", error.message);\n    throw error;\n  }\n};\n"],"names":["ImageGalleryWithLightbox","images","setImages","useState","imageRefs","setImageRefs","selectedImageIndex","setSelectedImageIndex","isImageLoaded","setIsImageLoaded","fetchImages","async","storageRef","ref","storage","result","listAll","urls","Promise","all","items","map","item","getDownloadURL","error","console","message","useEffect","img","Image","src","onload","React","Gallery","photos","url","width","height","onClick","event","_ref","index","Lightbox","mainSrc","nextSrc","length","prevSrc","onCloseRequest","onMovePrevRequest","onMoveNextRequest","toolbarButtons","key","style","padding","backgroundColor","color","border","borderRadius","cursor","fontSize","fileRef","deleteObject","alert","AdminPage","email","setEmail","password","setPassword","file","setFile","isAuthenticated","setIsAuthenticated","handleLogin","signInWithEmailAndPassword","auth","type","onChange","e","target","files","name","uploadBytes","handleDelete","split","pop","placeholder","value","app","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","getAuth","db","getFirestore","getStorage","signUpWithEmailAndPassword","Error","test","fetchSignInMethodsForEmail","user","createUserWithEmailAndPassword","sendEmailVerification","signInUser","emailVerified","sessionsRef","collection","q","query","where","uid","querySnapshot","getDocs","empty","forEach","updateDoc","doc","docSnap","id","isActive","sessionId","addDoc","userId","loginTime","Date","fetchComments","lastVisibleDoc","arguments","undefined","commentsRef","orderBy","limit","startAfter","snapshot","comments","docs","data","content","userEmail","timestamp","toDate","likes","likesUser","dislikes","dislikesUser","replies","lastVisible","addComment","text","currentUser","newComment","serverTimestamp","adminEmail","isEdited","lastEditedTimestamp","docRef","updateCommentInFirestore","docId","commentData","commentRef","getDoc","exists","log","updatedData","Array","isArray","resetPassword","sendPasswordResetEmail","success","addReplyToComment","commentDocId","newReply","arrayUnion"],"sourceRoot":""}