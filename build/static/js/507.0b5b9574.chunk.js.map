{"version":3,"file":"static/js/507.0b5b9574.chunk.js","mappings":"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","sources":["components/modalComponent.js","firebase.js"],"sourcesContent":["import React, { useState, useEffect,useRef  } from \"react\"; \nimport { query, collection, where, getDocs } from \"firebase/firestore\";\nimport { db } from '../firebase.js';\nimport { formatDistanceToNow } from 'date-fns'; // Import date-fns for time formatting\nimport { debounce } from \"lodash\";\nimport DOMPurify from 'dompurify';\nimport {onAuthStateChanged, signOut  } from \"firebase/auth\";\nimport LogoutIcon from \"@mui/icons-material/Logout\";\nimport { Modal, Box, Button, Tabs, Tab, TextField, Typography, IconButton, InputAdornment } from \"@mui/material\";\nimport ThumbUpIcon from \"@mui/icons-material/ThumbUp\";\nimport { Snackbar, Alert } from '@mui/material';\nimport ThumbDownIcon from \"@mui/icons-material/ThumbDown\";\nimport ReplyIcon from \"@mui/icons-material/Reply\";\nimport CommentIcon from '@mui/icons-material/Comment'; // Import the Comment icon\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { signUpWithEmailAndPassword,auth,resetPassword, signInUser, addComment, fetchComments, updateCommentInFirestore, addReplyToComment } from '../firebase';\nconst ModalComponent = () => {\n  const [open, setOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(0);\n  const [isLogin, setIsLogin] = useState(false);\n  const [formState, setFormState] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  \n  const [commentText, setCommentText] = useState(\"\");\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [openReplyBox, setOpenReplyBox] = useState(null); // Holds the id of the open reply box or null\n  const [isPasswordReset, setIsPasswordReset] = useState(false);\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [confirmPasswordVisible, setConfirmPasswordVisible] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [replyText, setReplyText] = useState(\"\");\n  const [currentUser, setCurrentUser] = useState(null); // Stores logged-in user info\n  const [loadingState, setLoadingState] = useState({\n    comments: false,  // Loading for fetching comments\n    addComment: false,  // Loading for adding comment\n    addReply: false,    // Loading for adding reply\n    auth: false,       // Loading for authentication (sign in/sign up)\n  });  \n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [snackbarType, setSnackbarType] = useState('success');  // 'success' or 'error'\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n  const handleTabChange = (_event, newValue) => {\n    setActiveTab(newValue);\n  };\n \n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormState((prevState) => ({\n      ...prevState,\n      [name]: DOMPurify.sanitize(value.trim()), // Ensure sanitization\n    }));\n  };\n\n  const showMessage = (message, type) => {\n    setSnackbarMessage(message);\n    setSnackbarType(type); // Pass either 'success' or 'error'\n    setSnackbarOpen(true);\n  };\n\n \n  const timeoutRef = useRef(null); // Move this outside useEffect\n  useEffect(() => {\n    const resetTimer = () => {\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\n      timeoutRef.current = setTimeout(handleSignOut, 15 * 60 * 1000); // Logout after 15 minutes\n    };\n  \n    const resetTimerAndBindEvents = () => {\n      window.addEventListener(\"mousemove\", resetTimer);\n      window.addEventListener(\"keydown\", resetTimer);\n      window.addEventListener(\"click\", resetTimer);\n      resetTimer(); // Start timer immediately\n    };\n  \n    resetTimerAndBindEvents();\n  \n    return () => {\n      clearTimeout(timeoutRef.current);\n      window.removeEventListener(\"mousemove\", resetTimer);\n      window.removeEventListener(\"keydown\", resetTimer);\n      window.removeEventListener(\"click\", resetTimer);\n    };\n  }, []);\n  \n\n  useEffect(() => {\n    if (activeTab === 1) {\n      setLoadingState((prevState) => ({ ...prevState, comments: true }));\n      const loadComments = async () => {\n        \n        try {\n          const { comments } = await fetchComments();\n          setComments(comments);\n        } catch (error) {\n          console.error(\"Error fetching comments:\", error);\n        } finally {\n          setLoadingState((prevState) => ({ ...prevState, comments: false }));\n\n        }\n      };\n  \n      loadComments(); // Fetch comments when activeTab is 1\n    }\n  }, [activeTab]);\n\n  const handleSignOut = async () => {\n    await signOut(auth);\n    setCurrentUser(null);\n  }; \n  \n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setCurrentUser(user ? { userId: user.uid, email: user.email } : null);\n    });\n    return () => unsubscribe();\n  }, []);\n  \n const handleSignUpSubmit = async () => {\n  setLoadingState((prevState) => ({ ...prevState, auth: true }));\n\n\n  try {\n    const isValidEmail = (email) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n\n    if (!isValidEmail(formState.email)) {\n      showMessage(\"Invalid email format.\", 'error'); // Error message\n      return;\n    }\n\n    if (formState.password !== formState.confirmPassword) {\n      showMessage(\"Passwords do not match.\", 'error'); // Error message\n      return;\n    }\n\n    await signUpWithEmailAndPassword(formState.email, formState.password);\n    setFormState({ email: \"\", password: \"\", confirmPassword: \"\" }); // Reset inputs after sign-up\n    showMessage(\"Signup successful. Please verify your email.\", 'success'); // Success message\n    setIsSignUp(false);\n    setIsLogin(true);\n  } catch (error) {\n    console.error(\"Signup Error:\", error);\n    showMessage(`Signup failed: ${error.code || \"Unknown error\"}`, 'error'); // Error message\n  } finally {\n    setLoadingState((prevState) => ({ ...prevState, auth: false }));\n\n  }\n};\n\n// Helper function to verify captcha\n\n  \n  const togglePasswordVisibility = () => {\n    setPasswordVisible((prev) => !prev);\n  };\n  \n  const toggleConfirmPasswordVisibility = () => {\n    setConfirmPasswordVisible((prev) => !prev);\n  };\n  \nconst handleLoginSubmit = async () => {\n  setLoadingState((prevState) => ({ ...prevState, auth: true }));\n\n  try {\n    const isValidEmail = (email) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n    if (!isValidEmail(formState.email)) {\n      showMessage(\"Invalid email format.\", 'error'); // Error message\n      return;\n    }\n\n    const user = await signInUser(formState.email, formState.password);\n    setFormState({ email: \"\", password: \"\", confirmPassword: \"\" }); // Reset inputs after sign-up\n  \n\n    setCurrentUser({\n      userId: user.uid,\n      email: user.email,\n      isAuthenticated: true,\n    });\n\n    setIsLogin(false);\n    showMessage(\"Login successful.\", 'success'); // Success message\n  } catch (error) {\n    showMessage(error.message || \"An unexpected error occurred.\", 'error'); // Error message\n  } finally {\n    setLoadingState((prevState) => ({ ...prevState, auth: false }));\n  }\n};\n  \n  \n  \n  const handleAddComment = async () => {\n    if (!canPerformAction()) return;\n    if (!commentText.trim()) return  showMessage('Please enter a valid comment.', 'error'); \n    \n    setLoadingState((prevState) => ({ ...prevState, addComment: true }));\n    const sanitizedComment = DOMPurify.sanitize(commentText);\n    try {\n      const newComment = await addComment(sanitizedComment, currentUser);\n      setComments((prevComments) => [newComment, ...prevComments]); // Append locally\n      setCommentText('');\n      showMessage('Comment added successfully.', 'success'); // Success message\n      \n    } catch (error) {\n      console.error(\"Error adding comment: \", error);\n      showMessage(\"Error adding comment. Please try again.\", \"error\"); // Error message\n    } finally {\n      setLoadingState((prevState) => ({ ...prevState, addComment: false }));\n    }\n  };\n  \n  \n  const lastActionTimestamp = useRef(0);\n  const RATE_LIMIT_MS = 5000; // 5 seconds\n  \n  // Utility function to handle rate-limiting check\n  const canPerformAction = () => {\n    const now = Date.now();\n    if (now - lastActionTimestamp.current < RATE_LIMIT_MS) {\n      showMessage(\"Slow down! Please wait before taking another action.\");\n      return false;\n    }\n    lastActionTimestamp.current = now;\n    return true;\n  };\n  \n   \n  \n  const handleAddReply = async (commentId) => {\n    if (!canPerformAction()) return; // Add rate-limiting check\n    if (!replyText.trim()) {\n      showMessage('Please enter a valid reply.', 'error'); // Error message\n      return;\n    }\n    \n    setLoadingState((prevState) => ({ ...prevState, addReply: true }));\n    const sanitizedReply = DOMPurify.sanitize(replyText);\n  \n    const newReply = {\n      userId: currentUser.userId,\n      userEmail: currentUser.email,\n      content: sanitizedReply,\n      timestamp: new Date(),\n    };\n  \n    try {\n      await addReplyToComment(commentId, newReply);\n      setReplyText('');\n      console.log(\"Reply added successfully:\", newReply);\n      showMessage('Reply added successfully.', 'success'); // Success message\n    } catch (error) {\n      console.error(\"Error adding reply: \", error);\n      showMessage(\"Error adding reply. Please try again.\", 'error'); // Error message\n    } finally {\n      setLoadingState((prevState) => ({ ...prevState, addReply: false }));\n    }\n  };\n  \n  const handleClose = () => {\n    setSnackbarOpen(false);\n    \n  };\n\n  const handleModalClose = () => {\n  setOpen(false);\n  setFormState({ email: \"\", password: \"\", confirmPassword: \"\" });\n  setCommentText(\"\"); // Reset comment input\n};\nconst lastLikeTimestamp = useRef(0);\n\nconst debouncedLikeDislike = debounce(async (id, action, currentUser, comments, setComments, showMessage, updateCommentInFirestore) => {\n  const now = Date.now();\n  if (now - lastLikeTimestamp.current < 3000) {\n    showMessage(\"Please wait before liking/disliking again.\", \"error\");\n    return;\n  }\n  lastLikeTimestamp.current = now;\n\n  if (!currentUser) {\n    showMessage(\"Please log in to like or dislike comments.\", \"error\");\n    return;\n  }\n\n  const userId = currentUser.userId;\n\n  // Find target comment\n  const targetComment = comments.find((comment) => comment.id === id);\n  if (!targetComment) {\n    console.error(`Comment with ID ${id} not found.`);\n    return;\n  }\n\n  const originalComments = [...comments]; // Backup state\n\n  // Create a new updated list without mutating state directly\n  const updatedComments = comments.map((comment) => {\n    if (comment.id !== id) return comment;\n\n    let updatedLikes = comment.likes || 0;\n    let updatedDislikes = comment.dislikes || 0;\n    let updatedLikesUser = [...comment.likesUser];\n    let updatedDislikesUser = [...comment.dislikesUser];\n\n    if (action === \"like\") {\n      if (updatedLikesUser.includes(userId)) {\n        updatedLikes = Math.max(updatedLikes - 1, 0);\n        updatedLikesUser = updatedLikesUser.filter((uid) => uid !== userId);\n      } else {\n        if (updatedDislikesUser.includes(userId)) {\n          updatedDislikes = Math.max(updatedDislikes - 1, 0);\n          updatedDislikesUser = updatedDislikesUser.filter((uid) => uid !== userId);\n        }\n        updatedLikes += 1;\n        updatedLikesUser.push(userId);\n      }\n    } else if (action === \"dislike\") {\n      if (updatedDislikesUser.includes(userId)) {\n        updatedDislikes = Math.max(updatedDislikes - 1, 0);\n        updatedDislikesUser = updatedDislikesUser.filter((uid) => uid !== userId);\n      } else {\n        if (updatedLikesUser.includes(userId)) {\n          updatedLikes = Math.max(updatedLikes - 1, 0);\n          updatedLikesUser = updatedLikesUser.filter((uid) => uid !== userId);\n        }\n        updatedDislikes += 1;\n        updatedDislikesUser.push(userId);\n      }\n    }\n\n    return {\n      ...comment,\n      likes: updatedLikes,\n      dislikes: updatedDislikes,\n      likesUser: updatedLikesUser,\n      dislikesUser: updatedDislikesUser,\n    };\n  });\n\n  setComments(updatedComments);\n\n  try {\n    const updatedComment = updatedComments.find((c) => c.id === id);\n    if (!updatedComment) throw new Error(\"Updated comment not found.\");\n    await updateCommentInFirestore(id, updatedComment);\n  } catch (error) {\n    console.error(\"Error updating like/dislike:\", error);\n    setComments(originalComments); // Revert state on failure\n    showMessage(\"Unable to update like/dislike. Please try again.\", \"error\");\n  }\n}, 1000); // 1-second debounce delay\n\nconst handleLikeDislike = (id, action) => {\n  debouncedLikeDislike(id, action, currentUser, comments, setComments, showMessage, updateCommentInFirestore);\n};\n\n\n\n\n\nconst handlePasswordResetSubmit = async () => { \n  setLoadingState((prevState) => ({ ...prevState, auth: true }));\n\n  try {\n    const userQuery = query(collection(db, \"users\"), where(\"email\", \"==\", formState.email));\n    const userSnapshot = await getDocs(userQuery);\n\n    if (userSnapshot.empty) {\n      showMessage(\"No account found with this email.\", \"error\");\n      return;\n    }\n\n    const result = await resetPassword(formState.email);\n    showMessage(result.message, \"success\"); // Success message\n  } catch (error) {\n    showMessage(error.message || \"An unexpected error occurred.\", \"error\"); // Error message\n  } finally {\n    setLoadingState((prevState) => ({ ...prevState, auth: false }));\n  }\n};\n\n\nconst toggleReplyBox = (id) => {\n  setOpenReplyBox((prev) => (prev === id ? null : id));\n};\n\n\n  return (\n    <>\n<Button\n  variant=\"contained\"\n  onClick={() => setOpen(true)}\n  sx={{\n    backgroundColor: \"#1976d2\", // Default MUI primary color\n    \"&:hover\": { backgroundColor: \"#1565c0\" }, // Darker shade on hover\n    boxShadow: 3, // Adds some elevation\n    borderRadius: \"50%\", // Perfect circle\n    width: '50px', // Set width to 30px\n    height: '50px', // Set height to 30px\n    display: 'flex', // Flex to align icon inside\n    justifyContent: 'center', // Horizontally center the icon\n    alignItems: 'center', // Vertically center the icon\n    padding: 0, // Remove padding to keep it small\n  }}\n>\n  <CommentIcon sx={{ color: 'white', fontSize: '20px' }} /> {/* Smaller icon size */}\n</Button>\n\n      <Modal open={open} onClose={handleModalClose}sx={{\n    zIndex: 10 // Set a lower zIndex to ensure the snackbar stays above\n  }}>\n   \n  <Box\n    sx={{\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      width: { xs: \"87%\", sm: 610 },\n      bgcolor: \"background.paper\",\n      boxShadow: 24,\n      borderRadius: 2,\n      p: 3,\n    }}\n    \n  >\n    {currentUser && (\n  <Box sx={{ display: \"flex\", justifyContent: \"center\", mb: 1 }}>\n    <IconButton onClick={handleSignOut} color=\"error\">\n      <LogoutIcon />\n    </IconButton>\n  </Box>\n)}\n\n    <Tabs value={activeTab} onChange={handleTabChange} centered>\n      <Tab label=\"Add Comment\" />\n      <Tab label=\"Comments\" />\n    </Tabs>\n\n    <Box mt={2}>\n    {activeTab === 0 && (\n  <>\n    {!currentUser? (\n      <>\n        {/* Message Box */}\n        {!isSignUp && !isLogin && !isPasswordReset && (\n          <Box sx={{ p: 2, border: '1px solid #ccc', borderRadius: '8px', backgroundColor: '#f9f9f9' }}>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Your feedback is important to us! We value transparency and ensure your comments are securely stored and reviewed to improve our aluminum and glazing services. Please sign up or log in to share your thoughts with us, knowing your information is kept safe.\n            </Typography>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              sx={{ mt: 2 }}\n              onClick={() => setIsSignUp(true)} // Open sign-up form\n            >\n              Sign Up to Share Feedback\n            </Button>\n            <Button\n              fullWidth\n              variant=\"text\"\n              color=\"secondary\"\n              sx={{ mt: 1 }}\n              onClick={() => setIsLogin(true)} // Open login form\n            >\n              Already have an account? Sign In\n            </Button>\n          </Box>\n        )}\n        {/* Password Reset Form */}\n{isPasswordReset && (\n  <>\n    <Typography variant=\"h6\" color=\"textPrimary\" sx={{ mb: 2 }}>\n      Reset Your Password\n    </Typography>\n    <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 3 }}>\n      Enter your email address below, and we&apos;ll send you a link to reset your password.\n    </Typography>\n    <TextField\n      fullWidth\n      name=\"email\"\n      label=\"Email\"\n      variant=\"outlined\"\n      margin=\"normal\"\n      value={formState.email}\n      onChange={handleChange}\n      sx={{ mb: 2 }}\n    />\n    <Button\n      fullWidth\n      variant=\"contained\"\n      color=\"primary\"\n      sx={{ mt: 2 }}\n      onClick={handlePasswordResetSubmit} // This will trigger the password reset logic\n      disabled={!formState.email|| loadingState.auth}\n    >\n   {loadingState.auth ? <CircularProgress size={24} sx={{ color: 'white' }} /> : 'Send Reset Link'}\n\n    </Button>\n    <Button\n      fullWidth\n      variant=\"text\"\n      color=\"secondary\"\n      sx={{ mt: 1 }}\n      onClick={() => {\n        setIsPasswordReset(false); // Close password reset form\n        setIsLogin(true); // Optionally, return to the login form\n      }}\n    >\n      Back to Login\n    </Button>\n  </>\n)}\n\n        {/* Sign-Up Form */}\n        {isSignUp && (\n          <>\n            <TextField\n              fullWidth\n              label=\"Email\"\n              name=\"email\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              value={formState.email}\n              onChange={handleChange}\n            />\n            <TextField\n              fullWidth\n              label=\"Password\"\n              name=\"password\"\n              type={passwordVisible ? 'text' : 'password'}\n              variant=\"outlined\"\n              margin=\"normal\"\n              autoComplete=\"new-password\" // Prevents autofill issues\n              value={formState.password}\n              onChange={handleChange}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton onClick={togglePasswordVisibility}>\n                        {passwordVisible ? <VisibilityOff /> : <Visibility />}\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n            <TextField\n              fullWidth\n              label=\"Confirm Password\"\n              name=\"confirmPassword\"\n              type={confirmPasswordVisible ? 'text' : 'password'}\n              variant=\"outlined\"\n              margin=\"normal\"\n               autoComplete=\"new-password\" // Prevents autofill issues\n               value={formState.confirmPassword}\n               onChange={handleChange}\n               slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton onClick={toggleConfirmPasswordVisibility}>\n                        {confirmPasswordVisible ? <VisibilityOff /> : <Visibility />}\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              sx={{ mt: 2 }}\n              onClick={handleSignUpSubmit}\n              disabled={!formState.email || !formState.password || !formState.confirmPassword|| loadingState.auth}\n            >\n    {loadingState.auth ? <CircularProgress size={24} sx={{ color: 'white' }} /> : 'Sign Up'}\n </Button>\n            <Button\n              fullWidth\n              variant=\"text\"\n              color=\"secondary\"\n              sx={{ mt: 1 }}\n              onClick={() => {\n                setIsSignUp(false);\n                setIsLogin(false);\n              }}\n            >\n              Cancel\n            </Button>\n          </>\n        )}\n\n        {/* Sign-In Form */}\n        {isLogin ? (\n  <>\n    <TextField\n      fullWidth\n      label=\"Email\"\n      name=\"email\"\n      variant=\"outlined\"\n      margin=\"normal\"\n      value={formState.email}\n     onChange={handleChange}\n    />\n    <TextField\n      fullWidth\n      label=\"Password\"\n      name=\"password\"\n      type={passwordVisible ? 'text' : 'password'}\n      variant=\"outlined\"\n      margin=\"normal\"\n      \n      autoComplete=\"new-password\" // Prevents autofill issues\n      value={formState.password}\n  onChange={handleChange}\n  slotProps={{\n    input: {\n      endAdornment: (\n        <InputAdornment position=\"end\">\n          <IconButton onClick={togglePasswordVisibility}>\n            {passwordVisible ? <VisibilityOff /> : <Visibility />}\n          </IconButton>\n        </InputAdornment>\n      ),\n    },\n  }}\n    />\n    {/* Reset Password Link */}\n    <Typography\n      variant=\"body2\"\n      color=\"primary\"\n      sx={{ mt: 1, cursor: 'pointer', textAlign: 'center' }}\n      onClick={() => {\n        setIsLogin(false);\n        setIsPasswordReset(true); // Switch to reset password\n      }}\n    >\n      Forgot Password? Reset it here.\n    </Typography>\n    <Button\n      fullWidth\n      variant=\"contained\"\n      color=\"primary\"\n      sx={{ mt: 2 }}\n      onClick={handleLoginSubmit}\n      disabled={!formState.email || !formState.password|| loadingState.auth}\n    >\n    {loadingState.auth ? <CircularProgress size={24} sx={{ color: 'white' }} /> : 'Sign In'}\n    </Button>\n    <Button\n      fullWidth\n      variant=\"text\"\n      color=\"secondary\"\n      sx={{ mt: 1 }}\n      onClick={() => {\n        setIsLogin(false);\n        setIsSignUp(false);\n      }}\n    >\n      Cancel\n    </Button>\n  </>\n):null}\n\n      </>\n    ) : (\n      <>\n        {/* Only show comment input once authenticated and verified */}\n        {currentUser && (\n  <Box mt={3}>\n    <TextField\n      fullWidth\n      label=\"Add a Comment\"\n      variant=\"outlined\"\n      margin=\"normal\"\n      multiline\n      value={commentText}\n      onChange={(e) => setCommentText(e.target.value)}\n    />\n    <Button\n      fullWidth\n      variant=\"contained\"\n      color=\"primary\"\n      sx={{ mt: 2 }}\n      onClick={handleAddComment}\n    >\n    {loadingState.addComment ? <CircularProgress size={24} sx={{ color: 'white' }} /> : 'Add Comment'}\n\n    </Button>\n  </Box>\n)}\n      </>\n    )}\n  </>\n)}\n\n\n\n\n\n{activeTab === 1 && (\n  <Box\n    sx={{\n      maxHeight: \"400px\", // Adjust the height as needed\n      overflowY: \"auto\",\n      padding: 0,\n      borderRadius: \"8px\",\n      width: \"100%\",\n    }}\n  >\n    {comments.length === 0 ? (\n      <Typography variant=\"body1\">No comments yet.</Typography>\n    ): loadingState.comments? ( // Show loading spinner while comments are loading\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '200px' }}>\n        <CircularProgress />\n      </Box>\n\n    ) : (\n      comments.map((comment) => (\n        <Box\n          key={comment.id}\n          sx={{\n            marginBottom: 2,\n            padding: 0,\n            borderRadius: \"8px\",\n            backgroundColor: \"white\",\n          }}\n        >\n          {/* Comment Content */}\n          <Box mt={1} sx={{ borderBottom: \"1px solid #ccc\", pb: 2 }}>\n            <Box display=\"flex\" alignItems=\"center\">\n              <AccountCircle /> {/* Avatar for the comment */}\n              <Box ml={2}>\n                <Typography variant=\"body2\">{comment.content}</Typography>\n              </Box>\n            </Box>\n\n            <Box display=\"flex\" alignItems=\"center\">\n            <IconButton\n  onClick={() =>\n    handleLikeDislike(comment.id, \"like\") // Use comment.id here as it refers to doc.id\n  }\n  sx={{\n    fontSize: \"1rem\",\n    mr: 1,\n    gap: \"0.3rem\",\n    color: comment.likesUser.includes(currentUser?.userId) ? \"blue\" : \"gray\",\n  }}\n>\n  <ThumbUpIcon />\n  {comment.likes}\n</IconButton>\n\n<IconButton\n  onClick={() =>\n    handleLikeDislike(comment.id, \"dislike\") // Use comment.id here as it refers to doc.id\n  }\n  sx={{\n    fontSize: \"1rem\",\n    mr: 1,\n    gap: \"0.3rem\",\n    color: comment.dislikesUser.includes(currentUser?.userId) ? \"red\" : \"gray\",\n  }}\n> \n\n  <ThumbDownIcon />\n  {comment.dislikes}\n</IconButton>\n<Box ml={2}>\n            {/* Display the formatted timestamp */}\n            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontSize: '0.75rem' }}>\n              {formatDistanceToNow(comment.timestamp) + \" ago\"}\n            </Typography>\n          </Box>\n<IconButton\n  onClick={() => toggleReplyBox(comment.id)} // Use id in toggleReplyBox\n  sx={{\n    fontSize: \"1rem\",\n    color: openReplyBox === comment.id ? \"green\" : \"gray\", // Use id in state check\n  }}\n>\n  <ReplyIcon />\n  {comment.replies.length}\n</IconButton>\n          \n            </Box>\n\n            {openReplyBox === comment.id && ( // Only show reply box for the specific comment's id\n  <Box mt={2}>\n    <TextField\n      fullWidth\n      label=\"Reply to this comment\"\n      variant=\"outlined\"\n      margin=\"normal\"\n      multiline\n      value={replyText}\n      onChange={(e) => setReplyText(e.target.value)}\n    />\n    <Button\n      fullWidth\n      variant=\"contained\"\n      color=\"primary\"\n      sx={{ mt: 2 }}\n      onClick={() => handleAddReply(comment.id)} // Pass id to handleAddReply\n    >\n        {loadingState.addReply ? <CircularProgress size={24} sx={{ color: 'white' }} /> : 'Add Reply'}\n\n    </Button>\n    {comment.replies.length > 0 && (\n      <Box mt={2}>\n        {comment.replies.map((reply) => (\n          <Box\n            key={reply.id} // Use reply's id\n            sx={{\n              ml: 7,\n              mb: 1,\n              p: 1,\n              border: \"1px solid #C0C0C0\",\n              borderRadius: 2,\n              backgroundColor: \"#E8E9E8\",\n              display:\"flex\",\n               alignItems:\"center\"\n            }}\n          >\n              <AccountCircle /> {/* Avatar for the comment */}\n              <Box ml={2}>\n                <Typography variant=\"body2\">{reply.content}</Typography>\n              </Box>          \n          </Box>\n        ))}\n      </Box>\n    )}\n  </Box>\n)}\n          </Box>\n        </Box>\n      ))\n    )}\n  </Box>\n)}\n    </Box>\n  </Box>\n</Modal>\n<Snackbar\n    open={snackbarOpen}\n    autoHideDuration={6000}\n    onClose={handleClose}\n    anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n    sx={{ zIndex:  20}}  // Ensure the Snackbar is above modals\n  >\n    <Alert\n      onClose={handleClose}\n      severity={snackbarType}  // Dynamically set the severity\n      sx={{ width: '100%' }}\n    >\n      {snackbarMessage}\n    </Alert>\n  </Snackbar>\n    </>\n    \n  );\n};\n\nexport default ModalComponent;\n","import { initializeApp } from \"firebase/app\";\nimport { \n  getAuth, \n  signOut, \n  signInWithEmailAndPassword, \n  createUserWithEmailAndPassword, \n  sendEmailVerification, \n  fetchSignInMethodsForEmail,\n  sendPasswordResetEmail\n} from \"firebase/auth\";\nimport { \n  getFirestore, \n  collection, \n  addDoc, \n  getDocs,  \n  updateDoc, \n  doc, \n  getDoc,\n  arrayUnion, \n  query, \n  orderBy, \n  limit, \n  startAfter, \n  serverTimestamp,where\n} from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Firebase Services\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst storage = getStorage(app);\n\nexport { auth, db, storage };\n\n// User Signup Function\nexport const signUpWithEmailAndPassword = async (email, password) => {\n  try {\n    if (password.length < 8) throw new Error(\"Password must be at least 8 characters long.\");\n    if (!/[A-Z]/.test(password) || !/[0-9]/.test(password) || !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      throw new Error(\"Password must include at least one uppercase letter, one number, and one special character.\");\n    }\n\n    const methods = await fetchSignInMethodsForEmail(auth, email);\n    if (methods.length > 0) throw new Error(\"Email already in use.\");\n\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    await sendEmailVerification(user);\n    return user;\n  } catch (error) {\n    console.error(\"Error during signup:\", error.message);\n    throw error;\n  }\n};\n\n// Sign-In Function\nexport const signInUser = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    if (!user.emailVerified) throw new Error(\"Please verify your email before logging in.\");\n\n    // Check for existing sessions\n    const sessionsRef = collection(db, \"sessions\");\n    const q = query(sessionsRef, where(\"userId\", \"==\", user.uid), where(\"isActive\", \"==\", true));\n    const querySnapshot = await getDocs(q);\n\n    // Log out old sessions\n    if (!querySnapshot.empty) {\n      querySnapshot.forEach(async (docSnap) => {\n        await updateDoc(doc(db, \"sessions\", docSnap.id), { isActive: false });\n      });\n    }\n\n    // Store new session\n    const sessionRef = await addDoc(sessionsRef, {\n      userId: user.uid,\n      email: user.email,\n      loginTime: new Date(),\n      isActive: true,\n    });\n\n    return { user, sessionId: sessionRef.id };\n  } catch (error) {\n    console.error(\"Error during sign-in:\", error.message);\n    throw error;\n  }\n};\n\n// Log-Out Function\nexport const logOutUser = async (sessionId) => {\n  try {\n    if (!sessionId) throw new Error(\"Session ID is required for logout.\");\n\n    // Mark session as inactive in Firestore\n    const sessionRef = doc(db, \"sessions\", sessionId);\n    await updateDoc(sessionRef, { isActive: false, logoutTime: new Date() });\n\n    // Sign out from Firebase Auth\n    await signOut(auth);\n    console.log(\"User logged out successfully.\");\n  } catch (error) {\n    console.error(\"Error during logout:\", error.message);\n    throw error;\n  }\n};\n\n// Fetch Comments Function\nexport const fetchComments = async (lastVisibleDoc = null) => {\n  try {\n    const commentsRef = collection(db, \"comments\");\n    let q = query(commentsRef, orderBy(\"timestamp\", \"desc\"), limit(10));\n\n    if (lastVisibleDoc) {\n      q = query(commentsRef, orderBy(\"timestamp\", \"desc\"), startAfter(lastVisibleDoc), limit(10));\n    }\n\n    const snapshot = await getDocs(q);\n    const comments = snapshot.docs.map(doc => {\n      const data = doc.data();\n      return {\n        id: doc.id,\n        content: data.content,\n        userEmail: data.userEmail,\n        timestamp: data.timestamp?.toDate() || new Date(),\n        likes: data.likesUser?.length || 0, // Safe fallback to 0\n        dislikes: data.dislikesUser?.length || 0, // Safe fallback to 0\n        replies: data.replies || [],\n        likesUser: data.likesUser || [], // Default to empty array if undefined\n        dislikesUser: data.dislikesUser || [], // Default to empty array if undefined\n      };\n    });\n\n    return { comments, lastVisible: snapshot.docs[snapshot.docs.length - 1] };\n  } catch (error) {\n    console.error(\"Error fetching comments:\", error.message);\n    throw error;\n  }\n};\n\n// Add Comment to Firestore\nexport const addComment = async (text, currentUser) => {\n  try {\n    if (!currentUser || !currentUser.email || !currentUser.userId) {\n      throw new Error(\"User not authenticated.\");\n    }\n\n    const commentsRef = collection(db, \"comments\");\n    const newComment = {\n      userEmail: currentUser.email,\n      userId: currentUser.userId,\n      content: text,\n      timestamp: serverTimestamp(),\n      likes: 0,\n      dislikes: 0,\n      adminEmail: '',\n      replies: [],\n      likesUser: [], // Initialize as empty array\n      dislikesUser: [], // Initialize as empty array\n      isEdited: false,\n      lastEditedTimestamp: null,\n    };\n\n    const docRef = await addDoc(commentsRef, newComment);\n    newComment.id = docRef.id;\n\n    return newComment;\n  } catch (error) {\n    console.error(\"Error adding comment:\", error.message);\n    throw error;\n  }\n};\n\n// Verify Comment by Admin\nexport const verifyComment = async (commentId) => {\n  try {\n    const commentRef = doc(db, \"comments\", commentId);\n    await updateDoc(commentRef, { isVerified: true });\n    console.log(`Comment ${commentId} verified successfully.`);\n  } catch (error) {\n    console.error(\"Error verifying comment:\", error.message);\n    throw error;\n  }\n};\n\n// Update Comment in Firestore\nexport const updateCommentInFirestore = async (docId, commentData) => {\n  try {\n    const commentRef = doc(db, \"comments\", docId);\n    const docSnap = await getDoc(commentRef);\n\n    if (!docSnap.exists()) {\n      console.error(\"Document not found for docId:\", docId);\n      throw new Error(`Comment with ID ${docId} not found.`);\n    }\n\n    console.log(\"Document fetched successfully:\", docSnap.data());\n\n    // Ensure values are always defined\n    const updatedData = {\n      likes: commentData.likes ?? 0,\n      dislikes: commentData.dislikes ?? 0,\n      likesUser: Array.isArray(commentData.likesUser) ? commentData.likesUser : [],\n      dislikesUser: Array.isArray(commentData.dislikesUser) ? commentData.dislikesUser : [],\n    };\n\n    // Update Firestore document\n    await updateDoc(commentRef, updatedData);\n\n    console.log(\"Comment updated successfully.\");\n  } catch (error) {\n    console.error(\"Error updating Firestore document:\", error.message);\n    throw error;\n  }\n};\n\n// Reset Password Function\nexport const resetPassword = async (email) => {\n  try {\n    if (!email) throw new Error(\"Email address is required.\");\n    await sendPasswordResetEmail(auth, email);\n    console.log(\"Password reset email sent successfully to:\", email);\n    return { success: true, message: \"Password reset email sent.\" };\n  } catch (error) {\n    console.error(\"Error sending password reset email:\", error.message);\n    throw error;\n  }\n};\n\n// Reply to a comment function\nexport const addReplyToComment = async (commentDocId, newReply) => {\n  try {\n    console.log(\"Debug: commentDocId passed to addReplyToComment:\", commentDocId);\n    // Get the reference to the main comment document\n    const commentRef = doc(db, \"comments\", commentDocId);\n\n    // Update the replies array in the comment document using arrayUnion from Firestore SDK\n    await updateDoc(commentRef, {\n      replies: arrayUnion(newReply), // Add the new reply to the replies array\n    });\n\n    console.log(\"Reply added successfully to comment:\", commentDocId);\n  } catch (error) {\n    console.error(\"Error adding reply to comment:\", error.message);\n    throw error;\n  }\n};\n"],"names":["ModalComponent","open","setOpen","useState","activeTab","setActiveTab","isLogin","setIsLogin","formState","setFormState","email","password","confirmPassword","commentText","setCommentText","isSignUp","setIsSignUp","openReplyBox","setOpenReplyBox","isPasswordReset","setIsPasswordReset","passwordVisible","setPasswordVisible","confirmPasswordVisible","setConfirmPasswordVisible","comments","setComments","replyText","setReplyText","currentUser","setCurrentUser","loadingState","setLoadingState","addComment","addReply","auth","snackbarMessage","setSnackbarMessage","snackbarType","setSnackbarType","snackbarOpen","setSnackbarOpen","handleChange","e","name","value","target","prevState","DOMPurify","sanitize","trim","showMessage","message","type","timeoutRef","useRef","useEffect","resetTimer","current","clearTimeout","setTimeout","handleSignOut","window","addEventListener","removeEventListener","loadComments","async","fetchComments","error","console","signOut","unsubscribe","onAuthStateChanged","user","userId","uid","togglePasswordVisibility","prev","lastActionTimestamp","canPerformAction","now","Date","handleClose","lastLikeTimestamp","debouncedLikeDislike","debounce","id","action","updateCommentInFirestore","find","comment","originalComments","updatedComments","map","updatedLikes","likes","updatedDislikes","dislikes","updatedLikesUser","likesUser","updatedDislikesUser","dislikesUser","includes","Math","max","filter","push","updatedComment","c","Error","handleLikeDislike","React","Button","variant","onClick","sx","backgroundColor","boxShadow","borderRadius","width","height","display","justifyContent","alignItems","padding","CommentIcon","color","fontSize","Modal","onClose","handleModalClose","zIndex","Box","position","top","left","transform","xs","sm","bgcolor","p","mb","IconButton","LogoutIcon","Tabs","onChange","handleTabChange","_event","newValue","centered","Tab","label","mt","TextField","fullWidth","margin","multiline","sanitizedComment","newComment","prevComments","CircularProgress","size","border","Typography","userQuery","query","collection","db","where","getDocs","empty","result","resetPassword","disabled","autoComplete","slotProps","input","endAdornment","InputAdornment","VisibilityOff","Visibility","toggleConfirmPasswordVisibility","test","isValidEmail","signUpWithEmailAndPassword","code","cursor","textAlign","signInUser","isAuthenticated","maxHeight","overflowY","length","key","marginBottom","borderBottom","pb","AccountCircle","ml","content","mr","gap","ThumbUpIcon","ThumbDownIcon","formatDistanceToNow","timestamp","toggleReplyBox","ReplyIcon","replies","sanitizedReply","newReply","userEmail","addReplyToComment","commentId","log","handleAddReply","reply","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","severity","app","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","getAuth","getFirestore","storage","getStorage","fetchSignInMethodsForEmail","createUserWithEmailAndPassword","sendEmailVerification","signInWithEmailAndPassword","emailVerified","sessionsRef","q","querySnapshot","forEach","updateDoc","doc","docSnap","isActive","sessionId","addDoc","loginTime","lastVisibleDoc","arguments","undefined","commentsRef","orderBy","limit","startAfter","snapshot","docs","data","toDate","lastVisible","text","serverTimestamp","adminEmail","isEdited","lastEditedTimestamp","docRef","docId","commentData","commentRef","getDoc","exists","updatedData","Array","isArray","sendPasswordResetEmail","success","commentDocId","arrayUnion"],"sourceRoot":""}